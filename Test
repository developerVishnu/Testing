export const useTXAjvValidation = (value, schema) => {
  const txAjvObj: any = TXAjv.getSingletonInstance();
  const validate = txAjvObj.compile(updateSchemaObjectProperties(schema) || {});
  /** Do validation */
  validate(value);

  return validate.errors;
};

export const updateSchemaObjectProperties = (obj) => {
  // Check if 'properties' exists and has a 'value' property
  if (obj.hasOwnProperty('properties') && obj.properties.hasOwnProperty('value')) {
    // Create a new object with the contents of 'value' at the top level
    const updatedProperties = { ...obj.properties.value };

    // Return a new object with the updated structure
    return updatedProperties;
  }

  // If 'value' doesn't exist, return a shallow copy of the object as is
  return { ...obj };
}

import Ajv, { Options } from 'ajv';
export declare class TXAjv {
    private static instance;
    private constructor();
    static getSingletonInstance(): Ajv;
    static getNewInstance(props?: Options): Ajv;
    private static createInstance;
}
