import React, { useEffect, useState } from "react";
import { get, set, cloneDeep } from 'lodash';
import { TXInput } from "@atoms/TXInput";
import { isObjectEmpty, getCodeDecodeList, getValueFromPath } from "@utils/index";
import { TXRemarks } from "@tradexpress/schemas/dist/TXRemarks";
import { Default } from "./default";
import { ITXRiskIndicatorListInterface } from "./interface";
import { getList, getRemarksDisabledAndRequiredValue } from "./utils";
import * as Styled from "./styled";
import { useTranslation } from "react-i18next";

export const TXRiskIndicatorList = (props: ITXRiskIndicatorListInterface) => {
  const { t } = useTranslation();
  const { onChange, value, path, name, remarksName, riskIndicatorArrayName, displayType, disabledConditions } = props;
  const [currentFields, setCurrentFields] = useState<any>(undefined);
  const [fetching, setFetching] = useState<boolean>(false);
  const [codeValues, setCodeValues] = useState<any>(undefined);
  const [riskIndicatorItems, setRiskIndicatorItems] = useState<any>(undefined);

  /** Get data from value props */
  // useEffect(() => {
  //   setCurrentFields(cloneDeep(get(value, path || name || '', undefined)))
  // }, [value]);

  /** Get codeDecode data for RISK_INDICATORS */
  useEffect(() => {
    setFetching(true);
    getCodeDecodeList({ codeId: "RISK_INDICATORS" }).then((codeData: any) => {
      setFetching(false);
      !!codeData && !!codeData?.RISK_INDICATORS?.codeValues && setCodeValues(codeData.RISK_INDICATORS.codeValues)
    }).catch(() => setFetching(false));
  }, []);

  /** Generate new array of data for rendering list purpose */
  useEffect(() => {
    if (!isObjectEmpty(value)) {
      let tempArray:any = []
      setRiskIndicatorItems(cloneDeep(get(value, `${name}.${riskIndicatorArrayName}`))?.map((item: any) => {
        const description = codeValues?.find( (i) => getValueFromPath(i, "codeValue") === getValueFromPath(item, "riskindicatorid"));
        let riskIndicatorDescriptionSubText = "";
        let riskIndicatorDescription = !!description ? getValueFromPath(description, "codeValueLocalDescription") : undefined;
        if(!!riskIndicatorDescription) {
          const splitText = riskIndicatorDescription.split("(");
          if(splitText.length === 2) {
            riskIndicatorDescription = splitText[0].trim();
            riskIndicatorDescriptionSubText = "(" + splitText[1];
          }
        }

        tempArray.push({
          ...item,
          riskindicatordescription : {value : riskIndicatorDescription}
        })
     
        return {
          ...item,
          riskIndicatorDescription,
          riskIndicatorDescriptionSubText,
        };
      }))

      setCurrentFields({
        ...cloneDeep(get(value, path || name || '', undefined)),
        [riskIndicatorArrayName as string]: tempArray
      })
    }
  }, [value, codeValues]);

  const handleRadioGroupOnChange = (value: any, riskindicatorid: any) => {
    const riskArray = cloneDeep(currentFields?.[riskIndicatorArrayName as string]);
    const riskIndex = riskArray.findIndex(i => getValueFromPath(i, 'riskindicatorid') === riskindicatorid);

    const newData = {
      ...currentFields,
      [riskIndicatorArrayName as string]: set(riskArray, `[${riskIndex}]`, {
        ...get(riskArray, `[${riskIndex}]`, {}),
        riskindicatorflag: { value: value },
        riskindicatorid: { value: riskindicatorid },
        ...(riskindicatorid === "RI-999" && value === "false") ? {[remarksName as string]: { value: '' }} : {},
      })
    };

    setCurrentFields(newData);
    onChange?.(newData);
  };

  const handleRemarksOnChange = (value: any) => {
    const riskArray = cloneDeep(currentFields?.[riskIndicatorArrayName as string]);
    const riskIndex = riskArray.findIndex(i => getValueFromPath(i, 'riskindicatorid') === "RI-999");
    const newData = { 
      ...currentFields, 
      [riskIndicatorArrayName as string]: set(riskArray, `[${riskIndex}]`, {
      ...get(riskArray, `[${riskIndex}]`, {}),
      ...value
    })};
    setCurrentFields(newData);
    onChange?.(newData);
  };

  return !isObjectEmpty(value) ? (
    <Styled.Container>
      <tx-core-grid>
        <tx-core-column xs="24" sm="12" md="12" lg="12" xl="12">
          {!!riskIndicatorItems && riskIndicatorItems.slice(0, 4)
            .map((item, i) => getList(item, i, handleRadioGroupOnChange, {displayType, disabledConditions, disabled: fetching}))
          }
        </tx-core-column>
        <tx-core-column xs="24" sm="12" md="12" lg="12" xl="12">
          {!!riskIndicatorItems && riskIndicatorItems.slice(4)
            .map((item, i) => getList(item, i, handleRadioGroupOnChange, {displayType, disabledConditions, disabled: fetching}))
          }
          <TXInput
            label={t('Manual AML Remarks RI-999')}
            placeholder={t('Enter Remarks...')}
            type="textarea"
            name={remarksName}
            schema={TXRemarks}
            maxCharacterLimit={256}
            value={currentFields?.[riskIndicatorArrayName as string]?.[4]}
            onChange={handleRemarksOnChange}
            {...getRemarksDisabledAndRequiredValue(props, get(currentFields, riskIndicatorArrayName as string))}
          />
        </tx-core-column>
      </tx-core-grid>
    </Styled.Container>
  ) : null;
};

TXRiskIndicatorList.defaultProps = Default;
