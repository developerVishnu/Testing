import {expect, sinon} from '@loopback/testlab';
import {
  FindRoute,
  InvokeMethod,
  ParseParams,
  Reject,
  RequestContext,
  RestBindings,
  Send,
} from '@loopback/rest';
import {MySequence} from '../path-to-your-sequence'; // Replace with the actual path

describe('MySequence', () => {
  let sequence: MySequence;
  let findRouteStub: sinon.SinonStub;
  let parseParamsStub: sinon.SinonStub;
  let invokeStub: sinon.SinonStub;
  let sendStub: sinon.SinonStub;
  let rejectStub: sinon.SinonStub;

  beforeEach(() => {
    // Create stubs for each dependency
    findRouteStub = sinon.stub().returns(() => {});
    parseParamsStub = sinon.stub().resolves([]);
    invokeStub = sinon.stub().resolves('test-result');
    sendStub = sinon.stub();
    rejectStub = sinon.stub();

    // Instantiate the sequence with the stubs
    sequence = new MySequence(
      findRouteStub,
      parseParamsStub,
      invokeStub,
      sendStub,
      rejectStub,
    );
  });

  it('handles a successful request', async () => {
    // Mock a RequestContext
    const request = {method: 'GET', url: '/test'} as any;
    const response = {} as any;
    const context = {
      request,
      response,
    } as RequestContext;

    // Call the sequence's handle method
    await sequence.handle(context);

    // Verify the behavior of each stub
    sinon.assert.calledWith(findRouteStub, request);
    sinon.assert.calledOnce(parseParamsStub);
    sinon.assert.calledOnce(invokeStub);
    sinon.assert.calledWith(sendStub, response, 'test-result');
  });

  it('handles errors by calling reject', async () => {
    // Mock a RequestContext
    const request = {method: 'GET', url: '/test'} as any;
    const response = {} as any;
    const context = {
      request,
      response,
    } as RequestContext;

    // Simulate an error during the invoke phase
    const error = new Error('test-error');
    invokeStub.rejects(error);

    // Call the sequence's handle method
    await sequence.handle(context);

    // Verify that reject was called
    sinon.assert.calledWith(rejectStub, context, error);
    sinon.assert.notCalled(sendStub); // Ensure send is not called in case of an error
  });
});
