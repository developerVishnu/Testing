import {expect} from '@loopback/testlab';
import {RestBindings, RestApplication} from '@loopback/rest';
import {HealthBindings, HealthComponent} from '@loopback/extension-health';
import {RestExplorerBindings, RestExplorerComponent} from '@loopback/rest-explorer';
import path from 'path';
import {TxWebBackendModule} from './path-to-your-module'; // Replace with actual path
import {ApplicationConfig} from '@loopback/core';

describe('TxWebBackendModule (Integration)', () => {
  let app: TxWebBackendModule;

  beforeEach(async () => {
    const config: ApplicationConfig = {
      rest: {
        port: 0, // Use ephemeral port for testing
        host: '127.0.0.1',
      },
    };
    app = new TxWebBackendModule(config);
    await app.boot();
  });

  afterEach(async () => {
    await app.stop();
  });

  it('initializes RestApplication correctly', async () => {
    expect(app).to.be.instanceOf(RestApplication);
    expect(app.projectRoot).to.equal(__dirname);
  });

  it('configures custom sequence', async () => {
    const sequence = await app.get('sequence.actions');
    expect(sequence).to.not.be.undefined();
  });

  it('sets static directory correctly', async () => {
    const staticPath = path.join(__dirname, '../public');
    expect(app.static('/', staticPath)).to.not.be.undefined();
  });

  it('includes RestExplorerComponent with custom configuration', async () => {
    const explorerConfig = await app.get(RestExplorerBindings.CONFIG);
    expect(explorerConfig).to.deepEqual({
      path: '/explorer',
    });
    expect(app.isBound(RestExplorerBindings.COMPONENT)).to.be.true();
  });

  it('includes HealthComponent with configured health endpoints', async () => {
    const healthConfig = await app.getConfig(HealthBindings.COMPONENT);
    expect(healthConfig).to.deepEqual({
      healthPath: '/info',
      livePath: '/live',
      readyPath: '/ready',
      useSelfHostedSpec: false,
    });
    expect(app.isBound(HealthBindings.COMPONENT)).to.be.true();
  });

  it('applies custom API spec security configuration', async () => {
    const apiSpec = await app.get(RestBindings.API_SPEC);
    expect(apiSpec.components).to.have.key('securitySchemes');
    expect(apiSpec.security).to.not.be.undefined();
  });

  it('sets custom boot options for controllers', async () => {
    expect(app.bootOptions.controllers).to.deepEqual({
      dirs: ['controllers'],
      extensions: ['.controller.js'],
      nested: true,
    });
  });
});
