import { getExceptionCatalogue } from './your-file'; // Replace with the actual file name
import { exceptionApi } from './exceptionApi'; // Replace with the actual import path

jest.mock('./exceptionApi'); // Mock the exceptionApi module

describe('getExceptionCatalogue', () => {
  it('should fetch and return exception catalog data', async () => {
    // Mock response data
    const mockResponse = { data: { success: true, items: [] } };

    // Mock the exceptionApi.get method
    const mockGet = jest.fn().mockResolvedValue(mockResponse);
    (exceptionApi as jest.Mock).mockResolvedValue({
      get: mockGet,
    });

    // Test inputs
    const txPersona = 'testPersona';
    const stage = 'testStage';
    const pageNumber = 1;
    const pageSize = 10;
    const transactionReference = 'testTransaction';

    // Call the function
    const result = await getExceptionCatalogue(
      txPersona,
      stage,
      pageNumber,
      pageSize,
      transactionReference
    );

    // Assertions
    expect(exceptionApi).toHaveBeenCalledTimes(1); // Ensure exceptionApi is called once
    expect(mockGet).toHaveBeenCalledWith(
      `exceptioncatalogue/${txPersona}/${stage}`,
      {
        params: {
          txbookinglocation: 'config-userBookingLocation', // Update if this is dynamic
          transactionreference: transactionReference,
          exceptionworkflowid: "'",
          pagenumber: pageNumber,
          pagesize: pageSize,
        },
      }
    );
    expect(result).toEqual(mockResponse.data); // Ensure the result matches the mock response
  });

  it('should throw an error if the API call fails', async () => {
    // Mock the exceptionApi.get method to throw an error
    const mockGet = jest.fn().mockRejectedValue(new Error('API Error'));
    (exceptionApi as jest.Mock).mockResolvedValue({
      get: mockGet,
    });

    // Test inputs
    const txPersona = 'testPersona';
    const stage = 'testStage';
    const pageNumber = 1;
    const pageSize = 10;
    const transactionReference = 'testTransaction';

    // Call the function and expect it to throw
    await expect(
      getExceptionCatalogue(
        txPersona,
        stage,
        pageNumber,
        pageSize,
        transactionReference
      )
    ).rejects.toThrow('API Error');
  });
});
