import React from 'react';
import { merge } from 'lodash';
import { isObject } from 'lodash';
import { useGlobalState } from './index';
import { IWithState, IComponent } from './interfaces'

export default (props: IWithState) => (Component) => (moreProps: any) => {
  const { stateName, states } = props;
  const [state, _setState] = useGlobalState();

  /** Function to set any all state */
  const setAllState = React.useCallback((values: any) => _setState(
    merge({}, state, values)
  ), []);
  
  /** Function to set any state */
  const setState = React.useCallback((value: any, stateKey: string) => _setState({
    [stateKey]: isObject(value) ? { ...state?.[stateKey], ...value } : value
  }), []);

  /** Function to set state based on the stateName */
  const setCurrentState = React.useCallback((value: any) => _setState({
    [stateName]: isObject(value) ? { ...state?.[stateName], ...value } : value
  }), []);

  const allProps: IComponent = {
    ...moreProps,
    stateName, /** State name to be use within the component */
    setState, /** Function to set specific state */
    setAllState,
    setCurrentState, /** Function to set current state */
    ...(!!stateName && {[stateName]: state?.[stateName]}), /** The current state */
    /** Returns states that is being defined in 'state' prop */
    ...(!!states && (typeof states === 'string' ? {[states]: state?.[states]} : (states as string[])?.reduce((a, v) => ({ ...a, [v]: state?.[v]}), {})))
  }
  return <Component {...allProps} />
};
