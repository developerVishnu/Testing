import { getCodeDecode } from './yourModule'; // Replace with the actual module path
import { exceptionApi } from './api'; // Replace with the actual module path
import { AxiosResponse } from 'axios';

jest.mock('./api', () => ({
  exceptionApi: jest.fn(),
}));

describe('getCodeDecode', () => {
  let mockGet: jest.Mock;
  let mockApi: any;

  beforeEach(() => {
    mockGet = jest.fn();
    mockApi = { get: mockGet };
    (exceptionApi as jest.Mock).mockResolvedValue(mockApi);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should fetch code decode details with correct parameters', async () => {
    const institution = 'Institution1';
    const codeid = 'Code123';
    const bookinglocation = 'Location1';
    const codevalues = 'Value1';
    const languagecode = 'en';

    const mockResponse: AxiosResponse = {
      data: { result: 'success' },
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {},
    };
    mockGet.mockResolvedValue(mockResponse);

    const result = await getCodeDecode(
      institution,
      codeid,
      bookinglocation,
      codevalues,
      languagecode
    );

    expect(exceptionApi).toHaveBeenCalled();
    expect(mockGet).toHaveBeenCalledWith(`/codedecodes/${institution}/${codeid}`, {
      params: {
        bookinglocation,
        codevalues,
        languagecode,
      },
    });
    expect(result).toEqual(mockResponse.data);
  });

  it('should handle API errors gracefully', async () => {
    const institution = 'Institution1';
    const codeid = 'Code123';

    const mockError = {
      response: { status: 404, data: { message: 'Not Found' } },
    };
    mockGet.mockRejectedValue(mockError);

    await expect(getCodeDecode(institution, codeid)).rejects.toEqual(mockError.response);

    expect(exceptionApi).toHaveBeenCalled();
    expect(mockGet).toHaveBeenCalledWith(`/codedecodes/${institution}/${codeid}`, {
      params: {
        bookinglocation: undefined,
        codevalues: undefined,
        languagecode: undefined,
      },
    });
  });
});
