
  import TransactionWorkDeskLCDetailsData from './TransactionWorkDeskLCDetailsData';
import { LCDetailMT700 } from './LCDetailMT700';
import { LCDetailsFS } from './LCDetailsFrontendSample';
import {
  LetterOfCreditNumberELC,
  SenderBankDetailsELC,
} from 'src/utils/TxwdLCDetails';

jest.mock('./LCDetailMT700', () => ({
  LCDetailMT700: {
    letterOfCreditDetails: {
      generalLetterOfCreditDetails: { test: 'generalData' },
      letterOfCreditNumber: { test: 'creditNumber' },
      senderBankDetails: { test: 'senderBank' },
    },
  },
}));

jest.mock('./LCDetailsFrontendSample', () => ({
  LCDetailsFS: { test: 'frontendSample' },
}));

jest.mock('src/utils/TxwdLCDetails', () => ({
  LetterOfCreditNumberELC: jest.fn(() => ({ letterOfCreditNumberData: { mockKey: 'mockValue' } })),
  SenderBankDetailsELC: jest.fn(() => ({ senderBankDetails: { mockKey: 'mockValue' } })),
}));

describe('TransactionWorkDeskLCDetailsData', () => {
  it('should merge and return the correct data', () => {
    const result = TransactionWorkDeskLCDetailsData();

    expect(result.letterOfCreditDetails.letterOfCreditNumber.mockKey).toBe('mockValue');
    expect(result.letterOfCreditDetails.senderBankDetails.mockKey).toBe('mockValue');
    expect(LetterOfCreditNumberELC).toHaveBeenCalledWith(LCDetailsFS);
    expect(SenderBankDetailsELC).toHaveBeenCalledWith(LCDetailsFS, LCDetailMT700.letterOfCreditDetails.generalLetterOfCreditDetails);
  });
});  import React from 'react';
import { render } from '@testing-library/react';
import { txnWorkdeskContext } from '@store';
import ContextProvider from './ContextProvider'; // Replace with the correct path

describe('ContextProvider', () => {
  it('should render children and provide context value', () => {
    // Mock values for the context
    const mockStoreContext = { state: { key: 'value' }, dispatch: jest.fn() };

    jest.spyOn(React, 'useContext').mockReturnValue(mockStoreContext);

    // Mock child component to consume context
    const ChildComponent = () => {
      const context = React.useContext(txnWorkdeskContext);
      return <div>{context.state.key}</div>;
    };

    const { getByText } = render(
      <ContextProvider>
        <ChildComponent />
      </ContextProvider>
    );

    // Ensure child component rendered correctly
    expect(getByText('value')).toBeInTheDocument();
  });

  it('should render without crashing when no children are provided', () => {
    const { container } = render(<ContextProvider />);
    expect(container).toBeDefined();
  });
});
